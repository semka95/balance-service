// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: queries.sql

package repository

import (
	"context"

	"github.com/shopspring/decimal"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(name, email, balance)
VALUES ($1, $2, $3)
RETURNING id, name, email, balance, created_at
`

type CreateUserParams struct {
	Name    string          `json:"name"`
	Email   string          `json:"email"`
	Balance decimal.Decimal `json:"balance"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Name, arg.Email, arg.Balance)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Balance,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, name, email, balance, created_at
FROM users
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Balance,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, balance, created_at
FROM users
WHERE email = $1
LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Balance,
		&i.CreatedAt,
	)
	return i, err
}

const updateBalance = `-- name: UpdateBalance :one
UPDATE users
SET balance = $2
WHERE id = $1
RETURNING id, name, email, balance, created_at
`

type UpdateBalanceParams struct {
	ID      int64           `json:"id"`
	Balance decimal.Decimal `json:"balance"`
}

func (q *Queries) UpdateBalance(ctx context.Context, arg UpdateBalanceParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateBalance, arg.ID, arg.Balance)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Balance,
		&i.CreatedAt,
	)
	return i, err
}
