// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: queries.sql

package repository

import (
	"context"

	"github.com/shopspring/decimal"
)

const createTransfer = `-- name: CreateTransfer :one
INSERT INTO transfers(from_user_id, to_user_id, amount)
VALUES ($1, $2, $3)
RETURNING id, from_user_id, to_user_id, amount, created_at
`

type CreateTransferParams struct {
	FromUserID int64           `json:"from_user_id"`
	ToUserID   int64           `json:"to_user_id"`
	Amount     decimal.Decimal `json:"amount"`
}

func (q *Queries) CreateTransfer(ctx context.Context, arg CreateTransferParams) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, createTransfer, arg.FromUserID, arg.ToUserID, arg.Amount)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromUserID,
		&i.ToUserID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const getInboundTransfers = `-- name: GetInboundTransfers :many
SELECT id, from_user_id, to_user_id, amount, created_at
FROM transfers
WHERE to_user_id = $1
    AND id > $2
LIMIT $3
`

type GetInboundTransfersParams struct {
	ToUserID int64 `json:"to_user_id"`
	ID       int64 `json:"id"`
	Limit    int32 `json:"limit"`
}

func (q *Queries) GetInboundTransfers(ctx context.Context, arg GetInboundTransfersParams) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, getInboundTransfers, arg.ToUserID, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromUserID,
			&i.ToUserID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOutboundTransfers = `-- name: GetOutboundTransfers :many
SELECT id, from_user_id, to_user_id, amount, created_at
FROM transfers
WHERE from_user_id = $1
    AND id > $2
LIMIT $3
`

type GetOutboundTransfersParams struct {
	FromUserID int64 `json:"from_user_id"`
	ID         int64 `json:"id"`
	Limit      int32 `json:"limit"`
}

func (q *Queries) GetOutboundTransfers(ctx context.Context, arg GetOutboundTransfersParams) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, getOutboundTransfers, arg.FromUserID, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromUserID,
			&i.ToUserID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransferByID = `-- name: GetTransferByID :one
SELECT id, from_user_id, to_user_id, amount, created_at
FROM transfers
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetTransferByID(ctx context.Context, id int64) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, getTransferByID, id)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromUserID,
		&i.ToUserID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const getTransfersBetweenUsers = `-- name: GetTransfersBetweenUsers :many
SELECT id, from_user_id, to_user_id, amount, created_at
FROM transfers
WHERE from_user_id = $1
    AND to_user_id = $2
    AND id > $3
LIMIT $4
`

type GetTransfersBetweenUsersParams struct {
	FromUserID int64 `json:"from_user_id"`
	ToUserID   int64 `json:"to_user_id"`
	ID         int64 `json:"id"`
	Limit      int32 `json:"limit"`
}

func (q *Queries) GetTransfersBetweenUsers(ctx context.Context, arg GetTransfersBetweenUsersParams) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, getTransfersBetweenUsers,
		arg.FromUserID,
		arg.ToUserID,
		arg.ID,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromUserID,
			&i.ToUserID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
